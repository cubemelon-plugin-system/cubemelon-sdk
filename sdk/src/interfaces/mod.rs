//! Plugin interfaces for the CubeMelon Plugin System
//! 
//! This module contains all standard plugin interfaces that define how
//! plugins interact with the host and with each other.

use crate::types::{
    CubeMelonUUID, CubeMelonVersion, CubeMelonLanguage,
};
use crate::error::CubeMelonPluginErrorCode;
use crate::structs::{CubeMelonHostServices};
use crate::instance::CubeMelonPlugin;

/// Basic interface that all plugins must implement
/// 
/// This is the core interface that provides essential plugin functionality
/// such as metadata, lifecycle management, and capability queries.
#[repr(C)]
#[derive(Debug)]
pub struct CubeMelonInterface {
    // === Basic Information ===
    /// Get the plugin's UUID
    pub get_uuid: extern "C" fn() -> CubeMelonUUID,

    /// Get the plugin's version
    pub get_version: extern "C" fn() -> CubeMelonVersion,

    /// Get supported plugin types (combined flags)
    pub get_supported_types: extern "C" fn() -> u64,

    // === Thread Safety ===
    /// Check if the plugin is thread-safe
    pub is_thread_safe: extern "C" fn() -> bool,

    /// Get thread requirements
    pub get_thread_requirements: extern "C" fn() -> u32,

    // === Instance-specific information retrieval ===
    /// Get the plugin name in the specified language
    pub get_name: extern "C" fn(
        plugin: *const CubeMelonPlugin,
        language: CubeMelonLanguage,
    ) -> *const u8,

    /// Get the plugin description in the specified language
    pub get_description: extern "C" fn(
        plugin: *const CubeMelonPlugin,
        language: CubeMelonLanguage,
    ) -> *const u8,

    // === Capability Queries ===
    /// Get a specific interface implementation
    pub get_interface: extern "C" fn(
        plugin: *mut CubeMelonPlugin,
        plugin_types: u64,
        plugin_version: u32,
        interface: *mut *const std::ffi::c_void,
    ) -> CubeMelonPluginErrorCode,

    // === Lifecycle Management ===
    /// Initialize the plugin
    pub initialize: extern "C" fn(
        plugin: *mut CubeMelonPlugin,
        host_plugin: *const CubeMelonPlugin,
        host_interface: *const CubeMelonInterface,
        host_services: *const CubeMelonHostServices,
    ) -> CubeMelonPluginErrorCode,

    /// Uninitialize the plugin
    pub uninitialize: extern "C" fn(
        plugin: *mut CubeMelonPlugin,
    ) -> CubeMelonPluginErrorCode,
}

impl CubeMelonInterface {
    /// Create a new interface with all function pointers set to None/default
    /// 
    /// This is a helper for creating interface instances. In practice,
    /// interfaces are usually generated by procedural macros.
    pub fn new() -> Self {
        Self {
            get_uuid: default_get_uuid,
            get_version: default_get_version,
            get_supported_types: default_get_supported_types,
            is_thread_safe: default_is_thread_safe,
            get_thread_requirements: default_get_thread_requirements,
            get_name: default_get_name,
            get_description: default_get_description,
            get_interface: default_get_interface,
            initialize: default_initialize,
            uninitialize: default_uninitialize,
        }
    }
}

// Default implementations for interface methods

extern "C" fn default_get_uuid() -> CubeMelonUUID {
    CubeMelonUUID::zero()
}

extern "C" fn default_get_version() -> CubeMelonVersion {
    CubeMelonVersion::new(0, 0, 0)
}

extern "C" fn default_get_supported_types() -> u64 {
    0 // No supported types
}

extern "C" fn default_is_thread_safe() -> bool {
    false // Conservative default
}

extern "C" fn default_get_thread_requirements() -> u32 {
    0 // No special requirements
}

extern "C" fn default_get_name(
    _plugin: *const CubeMelonPlugin,
    _language: CubeMelonLanguage,
) -> *const u8 {
    b"Unknown Plugin\0".as_ptr()
}

extern "C" fn default_get_description(
    _plugin: *const CubeMelonPlugin,
    _language: CubeMelonLanguage,
) -> *const u8 {
    b"No description\0".as_ptr()
}

extern "C" fn default_get_interface(
    _plugin: *mut CubeMelonPlugin,
    _plugin_types: u64,
    _plugin_version: u32,
    interface: *mut *const std::ffi::c_void,
) -> CubeMelonPluginErrorCode {
    if !interface.is_null() {
        unsafe { *interface = std::ptr::null(); }
    }
    CubeMelonPluginErrorCode::InterfaceNotSupported
}

extern "C" fn default_initialize(
    _plugin: *mut CubeMelonPlugin,
    _host_plugin: *const CubeMelonPlugin,
    _host_interface: *const CubeMelonInterface,
    _host_services: *const CubeMelonHostServices,
) -> CubeMelonPluginErrorCode {
    CubeMelonPluginErrorCode::Success
}

extern "C" fn default_uninitialize(
    _plugin: *mut CubeMelonPlugin,
) -> CubeMelonPluginErrorCode {
    CubeMelonPluginErrorCode::Success
}

// Individual interface modules
pub mod single_task;
pub mod async_task;
pub mod resident;
pub mod state;
pub mod manager;
// pub mod data_input;
// pub mod data_output;
// pub mod ui;

// Re-export common interfaces
pub use single_task::*;
pub use async_task::*;
pub use resident::*;
pub use state::*;
pub use manager::*;
// pub use data_input::*;
// pub use data_output::*;
// pub use ui::*;

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_interface_creation() {
        let interface = CubeMelonInterface::new();
        
        // Test default implementations
        let uuid = (interface.get_uuid)();
        assert_eq!(uuid, CubeMelonUUID::zero());

        let version = (interface.get_version)();
        assert_eq!(version, CubeMelonVersion::new(0, 0, 0));

        let thread_safe = (interface.is_thread_safe)();
        assert!(!thread_safe); // Conservative default

        let supported_types = (interface.get_supported_types)();
        assert_eq!(supported_types, 0);
    }

    #[test]
    fn test_default_interface_methods() {
        // Test that default implementations don't crash
        let uuid = default_get_uuid();
        assert_eq!(uuid.bytes, [0; 16]);

        let version = default_get_version();
        assert_eq!(version.major, 0);

        let _name = default_get_name(std::ptr::null(), CubeMelonLanguage::EN_US);

        let init_result = default_initialize(
            std::ptr::null_mut(),
            std::ptr::null(),
            std::ptr::null(),
            std::ptr::null(),
        );
        assert_eq!(init_result, CubeMelonPluginErrorCode::Success);
    }
}